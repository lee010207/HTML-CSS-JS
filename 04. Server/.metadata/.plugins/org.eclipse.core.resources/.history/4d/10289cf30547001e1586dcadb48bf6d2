package com.front;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.model.MemberDAO;
import com.model.MemberDTO;

/**
 * Servlet implementation class FrontController
 */
@WebServlet("*.do")
// *.do : 모든 url값이 .do로 끝나면 여기로 오게
public class FrontController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		
		System.out.println("프론트 컨트롤러 실행");
		
		// 1. 클라이언트가 요청한 url 주소 가져오기
		String reqURI = request.getRequestURI();
		System.out.println(reqURI);
		
		// 2. Context Path : 웹 어플리케이션의 시작 주소
		String ctPath = request.getContextPath();
		System.out.println(ctPath);
		
		// 3. client 요청 부분만 분리
		// ctPath 길이 + 1( '/' ) 만큼 잘라내고 뒷부분만 가져오기
		String command = reqURI.substring(ctPath.length() + 1);
		System.out.println(command);
		
		// 4. 기능 연결
		// 4-(1). 회원가입 기능 구현
		if(command.equals("JoinService.do")) {
			request.setCharacterEncoding("EUC-KR");
			
			String email = request.getParameter("email");
			String pw = request.getParameter("pw");
			String phone = request.getParameter("phone");
			String addr = request.getParameter("addr");
			
			// System.out.println(email + pw + phone + addr);
			MemberDAO dao = new MemberDAO();
			MemberDTO dto = new MemberDTO(email, pw, phone, addr);
			System.out.println(dto.toString());
			int cnt = dao.join(dto);
			
			if(cnt > 0) {
				response.sendRedirect("main.jsp");
			}else {
				System.out.println("회원가입 실패...");
			}
		}else if(command.equals("LoginService.do")) {
			String email = request.getParameter("email");
			String pw = request.getParameter("pw");
			
			MemberDAO dao = new MemberDAO();
			MemberDTO dto = new MemberDTO(email, pw);
			MemberDTO info = dao.login(dto);
			
			HttpSession session = request.getSession();
			
			// 1. URL : 정보를 URL 뒤에 붙여서 넘김 -> 보안 취약, 대량 데이터 전송 안됨
			// 2. request 영역에 저장 : 포워드방식으로 이동
			// 3. application : 개인 정보가 다 같이 공유됨
			// 4. cookie : 텍스트 형태로만 저장 할 수 있음, 보안 취약
			
			// 5. session : 보안 강력, 대량 데이터 저장 가능
			// --> 세션 : 서버에 있는 영역(브라우저마다 별개로), 서버에서 보관하면서 사용자별로 다 다르게 공간이 배정됨  ex)개인사물함
			// --> 고유한 키 값을 JESESSIONID로 부여 : 각 개인별 공간 구분 및 관리 (공간을 열어서 데이터 저장, 꺼내기)
			// --> 세션 만료 : 고유키 JESESSION 분실 , 브라우저 종료 시
			// 요청한 사람의 키를 가져와야하기 때문에 세션 만들때는 request객체 이용
			
			session.setAttribute("info", info);
			// session에 로그인 정보 저장
			// 로그아웃 클릭 전, 브라우저를 닫기 전까지 유지됨
			
			if(info != null) {
				System.out.println(info.toString());
			}else {
				System.out.println("로그인 실패");
			}
			response.sendRedirect("main.jsp");
		}else if(command.equals("LogoutService.do")) {
			HttpSession session = request.getSession();
			session.invalidate();
			
			response.sendRedirect("main.jsp");
		}
		
	}

}
