package com.front;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.controller.DeleteMsg;
import com.controller.JoinService;
import com.controller.LoginService;
import com.controller.LogoutService;
import com.controller.MsgDeleteAll;
import com.controller.MsgSendService;
import com.controller.UpdateService;
import com.model.MemberDAO;
import com.model.MemberDTO;
import com.model.MessageDAO;
import com.model.MessageDTO;

/**
 * Servlet implementation class FrontController
 */
@WebServlet("*.do")
// *.do : 모든 url값이 .do로 끝나면 여기로 오게
public class FrontController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	// 전역변수로 HashMap 만들기
	// Why? 사용자가 갑자기 증가했을 경우, 
	// 객체 생성이 갑자기 많이 사용되면 램이 다운됌 : 객체 생성 = 새로운 데이터(로직,값 등)가 생기는 거 -> 휘발성 메모리(램)에 저장
	// 요청이 들어올 때마다 객체를 매번 새롭게 만드는 게 아니라 
	// 객체를 한번만 생성해서 각 기능을 실행하게 만들어주기 위해 => Singleton 방식
	HashMap<String,Icommand> map = new HashMap<>();
	
	

	@Override
	public void init() throws ServletException {
		// map에 값을 넣어주는 작업인 것 같음
		// TODO Auto-generated method stub
		super.init();
		// 누군가에 의해서 현재 서블릿을 들어오게 된다면
		// 서블릿을 실행할 수 있게 서블릿 객체를 생성하는 메소드
		// 최초에 의해서 한번만 실행됨!
		map.put("JoinService.do",new JoinService());
		map.put("LoginService.do",new LoginService());
		map.put("LogoutService.do",new LogoutService());
		map.put("UpdateService.do",new UpdateService());
		map.put("MsgSendService.do",new MsgSendService());
		map.put("DeleteAll.do",new MsgDeleteAll());
		map.put("DeleteMsg.do",new DeleteMsg());
	}



	/**
	 * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		
		System.out.println("프론트 컨트롤러 실행");
		
		// 1. 클라이언트가 요청한 url 주소 가져오기
		String reqURI = request.getRequestURI();
		//System.out.println(reqURI);
		
		// 2. Context Path : 웹 어플리케이션의 시작 주소
		String ctPath = request.getContextPath();
		//System.out.println(ctPath);
		
		// 3. client 요청 부분만 분리
		// ctPath 길이 + 1( '/' ) 만큼 잘라내고 뒷부분만 가져오기
		String command = reqURI.substring(ctPath.length() + 1);
		System.out.println(command);
		
		// 4. 기능 연결
		request.setCharacterEncoding("EUC-KR");
		
		// 업캐스팅
		// if문 위에 미리 부모 객체 생성해놓고
		// if문 안에서 각각 필요한 자식 메서드를 사용할 자식 객체 각자 생성
		// for 공통된 코드(중복된 코드) 줄이기 위해
		// Icommand service = map.get(command);
		
		//String moveUrl = service.execute(request, response);
		// 위에 service 메서드의 매개변수인 request, response를 execute메서드 매개변수로 보내줌
		//response.sendRedirect(moveUrl);
		
		response.sendRedirect(map.get(command).execute(request, response));
		
		
	}

}
